[{"/Users/leqaajamal/Desktop/milestone-2-Team-15/milestone-2-team-15/src/index.js":"1","/Users/leqaajamal/Desktop/milestone-2-Team-15/milestone-2-team-15/src/reportWebVitals.js":"2","/Users/leqaajamal/Desktop/milestone-2-Team-15/milestone-2-team-15/src/App.js":"3","/Users/leqaajamal/Desktop/milestone-2-Team-15/milestone-2-team-15/src/components/login.js":"4"},{"size":500,"mtime":1609772082472,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1609772082473,"results":"7","hashOfConfig":"6"},{"size":30120,"mtime":1609850185814,"results":"8","hashOfConfig":"6"},{"size":1165,"mtime":1609850647164,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1nu25dy",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/leqaajamal/Desktop/milestone-2-Team-15/milestone-2-team-15/src/index.js",[],["21","22"],"/Users/leqaajamal/Desktop/milestone-2-Team-15/milestone-2-team-15/src/reportWebVitals.js",[],"/Users/leqaajamal/Desktop/milestone-2-Team-15/milestone-2-team-15/src/App.js",["23"],"import logo from './logo.svg';\nimport './App.css';\nimport Login from \"./components/login\"\nfunction App() {\n  return (\n   <Login/>\n  );\n}\n\nexport default App;\n\n\n// import React, { useState, useEffect } from 'react'\n// import '../../../Stylesheets/FormHousehold.css'\n// import { Form, Row, Col, Card, Button } from 'react-bootstrap'\n// import CreateEditHouseholdLogo from '../../../images/CreateEditHouseholdLogo.png'\n// import CreateEditHouseholdPlusIcon from '../../../images/CreateEditHouseholdPlusIcon.png'\n// import CreateEditHouseholdProceedIcon from '../../../images/CreateEditHouseholdProceedIcon.png'\n// import { useHistory } from 'react-router'\n// import { checkTokenExpired } from '../../../globalState/actions/AuthActions'\n// import { useSelector, useDispatch } from 'react-redux'\n// import axios from 'axios'\n// import { backendLink } from '../../../keys_dev'\n\n// export default function CreateEditHousehold(props) {\n//   const token = useSelector((state) => state.token)\n//   const id = useSelector((state) => state.id)\n//   const history = useHistory()\n//   const dispatch = useDispatch()\n//   const [status, setStatus] = useState('')\n//   const [birthDate, setBirthofdate] = useState('')\n//   const [birthdateError, setbirthdateError] = useState('')\n//   const [type, setType] = useState('Household')\n//   const [phoneNumber, setPhonenumber] = useState('')\n//   const [phonenumberError, setphonenumberError] = useState('')\n//   const [firstName, setFirstname] = useState('')\n//   const [firstnameError, setfirstnameError] = useState('')\n//   const [email, setEmail] = useState('')\n//   const [emailError, setemailError] = useState('')\n//   const [lastName, setLastname] = useState('')\n//   const [lastnameError, setlastnameError] = useState('')\n//   const [country, setCountry] = useState('')\n//   const [countryError, setcountryError] = useState('')\n//   const [gender, setGender] = useState('')\n//   const [genderError, setgenderError] = useState('')\n//   const [addressState, setState] = useState('')\n//   const [addressStateError, setstateError] = useState('')\n//   const [attachements, setAttachements] = useState('')\n//   const [address, setAddress] = useState('')\n//   const [addressError, setaddressError] = useState('')\n\n//   const [leadChannel, setLeadchannel] = useState('')\n//   const [leadchannelError, setleadchannelError] = useState('')\n//   const [ImplementedAmount, setImplementedamount] = useState('')\n\n//   useEffect(() => {\n//     if (props.typeCreateEdit === 'edit') {\n//       setBirthofdate(props.data.birthDate)\n//       setState(props.data.state)\n//       setFirstname(props.data.firstName)\n//       setLastname(props.data.lastName)\n//       setAddress(props.data.address)\n//       setAttachements(props.data.attachments)\n//       setCountry(props.data.country)\n//       setEmail(props.data.email)\n//       setImplementedamount(props.data.implementedAmount)\n//       setLeadchannel(props.data.leadChannel)\n//       setPhonenumber(props.data.phoneNumber)\n//       setStatus(props.data.status)\n//       setType(props.data.type)\n//       setGender(props.data.gender)\n//     }\n//   }, [])\n//   const hanndleclickproceed = () => {\n//     if (props.typeCreateEdit === 'create') {\n//       axios({\n//         url: `${backendLink}/customers/createhouseholdowner`,\n//         method: 'post',\n//         data: {\n//           firstName: firstName,\n//           lastName: lastName,\n//           birthDate: birthDate,\n//           phoneNumber: phoneNumber,\n//           email: email,\n//           gender: gender,\n//           country: country,\n//           addressState: addressState,\n//           address: address,\n//           leadChannel: leadChannel,\n//           Employee: {\n//             id: id,\n//           },\n//         },\n//         headers: {\n//           authorization: token,\n//         },\n//       }).then((res) => {\n//         console.log('ALI', res)\n//         if (res.data.error === '\"firstName\" is not allowed to be empty') {\n//           setfirstnameError('Field required correctly')\n//         } else if (res.data.error === '\"lastName\" is not allowed to be empty') {\n//           setlastnameError('Field required correctly')\n//         } else if (\n//           res.data.error ===\n//           '\"firstName\" with value \"ll,l\" fails to match the required pattern: /^[A-Za-z][A-Za-z0-9]*$/'\n//         ) {\n//           setfirstnameError('invalid First Name')\n//         } else if (\n//           res.data.error ===\n//           '\"lastName\" with value \"ll,l\" fails to match the required pattern: /^[A-Za-z][A-Za-z0-9]*$/'\n//         ) {\n//           setlastnameError('invalid Last Name')\n//         } else if (\n//           res.data.error ===\n//           '\"birthDate\" must be a number of milliseconds or valid date string'\n//         ) {\n//           setbirthdateError('Field required correctly')\n//         } else if (\n//           res.data.error === '\"phoneNumber\" is not allowed to be empty'\n//         ) {\n//           setphonenumberError('Field required correctly')\n//         } else if (res.data.error === 'already exists') {\n//           setphonenumberError('already exists')\n//         } else if (res.data.error === '\"email\" is not allowed to be empty') {\n//           setemailError('Field required correctly')\n//         } else if (res.data.error === '\"email\" must be a valid email') {\n//           setemailError('Invalid mail')\n//         } else if (res.data.error === '\"gender\" is not allowed to be empty') {\n//           setgenderError('Field required correctly')\n//         } else if (\n//           res.data.error === '\"gender\" must be one of [male, female]'\n//         ) {\n//           setgenderError('[male, female]')\n//         } else if (res.data.error === '\"country\" is not allowed to be empty') {\n//           setcountryError('Field required correctly')\n//         } else if (\n//           res.data.error === '\"country\" must be one of [Australia, New Zealand]'\n//         ) {\n//           setcountryError('[Australia, New Zealand]')\n//         } else if (\n//           res.data.error === '\"addressState\" is not allowed to be empty'\n//         ) {\n//           setstateError('Field required correctly')\n//         } else if (\n//           res.data.error ===\n//           '\"addressState\" must be one of [New South Wales, Queensland, South Australia, Tasmania, Victoria, Western Australia]'\n//         ) {\n//           setstateError('State must be in Australia')\n//         } else if (\n//           res.data.error ===\n//           `\"addressState\" must be one of [Gisborne, Northland, ManawatÅ«-Whanganui, Hawke's Bay, West Coast, Bay of Plenty, Southland, Waikato, Tasman, Marlborough, Taranaki, Otago, Canterbury, Auckland, Wellington]`\n//         ) {\n//           setstateError('State must be in New Zealand')\n//         } else if (res.data.error === '\"address\" is not allowed to be empty') {\n//           setaddressError('Field required correctly')\n//         } else if (\n//           res.data.error === '\"leadChannel\" is not allowed to be empty'\n//         ) {\n//           setleadchannelError('Field required correctly')\n//         } else if (\n//           res.data.error ===\n//           '\"leadChannel\" must be one of [Social Media, Website, Sales]'\n//         ) {\n//           setleadchannelError(\n//             'leadChannel must be one of [Website, Social Media, Sales]'\n//           )\n//         } else {\n//           console.log('Doniaa', res)\n//           if (res.data.statusCode === 0) {\n//             history.push({\n//               pathname: '/Customers/household/DetailedView',\n//               state: { id: res.data.owner._id },\n//             })\n//           }\n//         }\n//       })\n//     } else {\n//       if (!dispatch(checkTokenExpired(history))) {\n//         axios({\n//           url: `${backendLink}/customers/editHouseholdOwner`,\n//           method: 'post',\n\n//           data: {\n//             id: props.id,\n//             firstName: firstName,\n//             lastName: lastName,\n//             birthDate: birthDate,\n//             phoneNumber: phoneNumber,\n//             email: email,\n//             gender: gender,\n//             country: country,\n//             addressState: addressState,\n//             address: address,\n//             leadChannel: leadChannel,\n//             Account: {\n//               id: id,\n//             },\n//           },\n//           headers: {\n//             authorization: token,\n//           },\n//         }).then((res) => {\n//           console.log('ALI', res)\n//           if (res.data.error === '\"firstName\" is not allowed to be empty') {\n//             setfirstnameError('Field required correctly')\n//           } else if (\n//             res.data.error === '\"lastName\" is not allowed to be empty'\n//           ) {\n//             setlastnameError('Field required correctly')\n//           } else if (\n//             res.data.error ===\n//             '\"firstName\" with value \"ll,l\" fails to match the required pattern: /^[A-Za-z][A-Za-z0-9]*$/'\n//           ) {\n//             setfirstnameError('invalid First Name')\n//           } else if (\n//             res.data.error ===\n//             '\"lastName\" with value \"ll,l\" fails to match the required pattern: /^[A-Za-z][A-Za-z0-9]*$/'\n//           ) {\n//             setlastnameError('invalid Last Name')\n//           } else if (\n//             res.data.error ===\n//             '\"birthDate\" must be a number of milliseconds or valid date string'\n//           ) {\n//             setbirthdateError('Field required correctly')\n//           } else if (\n//             res.data.error === '\"phoneNumber\" is not allowed to be empty'\n//           ) {\n//             setphonenumberError('Field required correctly')\n//           } else if (res.data.error === 'already exists') {\n//             setphonenumberError('already exists')\n//           } else if (res.data.error === '\"email\" is not allowed to be empty') {\n//             setemailError('Field required correctly')\n//           } else if (res.data.error === '\"email\" must be a valid email') {\n//             setemailError('Invalid mail')\n//           } else if (res.data.error === '\"gender\" is not allowed to be empty') {\n//             setgenderError('Field required correctly')\n//           } else if (\n//             res.data.error === '\"gender\" must be one of [male, female]'\n//           ) {\n//             setgenderError('[male, female]')\n//           } else if (\n//             res.data.error === '\"country\" is not allowed to be empty'\n//           ) {\n//             setcountryError('Field required correctly')\n//           } else if (\n//             res.data.error ===\n//             '\"country\" must be one of [Australia, New Zealand]'\n//           ) {\n//             setcountryError('[Australia, New Zealand]')\n//           } else if (\n//             res.data.error === '\"addressState\" is not allowed to be empty'\n//           ) {\n//             setstateError('Field required correctly')\n//           } else if (\n//             res.data.error ===\n//             '\"addressState\" must be one of [New South Wales, Queensland, South Australia, Tasmania, Victoria, Western Australia]'\n//           ) {\n//             setstateError('State must be in Australia')\n//           } else if (\n//             res.data.error ===\n//             `\"addressState\" must be one of [Gisborne, Northland, ManawatÅ«-Whanganui, Hawke's Bay, West Coast, Bay of Plenty, Southland, Waikato, Tasman, Marlborough, Taranaki, Otago, Canterbury, Auckland, Wellington]`\n//           ) {\n//             setstateError('State must be in New Zealand')\n//           } else if (\n//             res.data.error === '\"address\" is not allowed to be empty'\n//           ) {\n//             setaddressError('Field required correctly')\n//           } else if (\n//             res.data.error === '\"leadChannel\" is not allowed to be empty'\n//           ) {\n//             setleadchannelError('Field required correctly')\n//           } else if (\n//             res.data.error ===\n//             '\"leadChannel\" must be one of [Social Media, Website, Sales]'\n//           ) {\n//             setleadchannelError(\n//               'leadChannel must be one of [Website, Social Media, Sales]'\n//             )\n//           } else {\n//             if (res.data.statusCode === 0) {\n//               history.push({\n//                 pathname: '/Customers/household/DetailedView',\n//                 state: { id: props.id },\n//               })\n//             }\n//           }\n//         })\n//       }\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <Card className='CreateEditHouseholCard'>\n//         <Card.Body className='CreateEditHouseholNopadding CreateEditHouseholnopadding'>\n//           <Form>\n//             <Row className='CreateEditHouseholdPadding'>\n//               <Col xs={2} className='CreateEditHouseholdCol1Padding'>\n//                 <img\n//                   alt=''\n//                   src={CreateEditHouseholdLogo}\n//                   className='CreateEditHouseholdLogo'\n//                 />\n//               </Col>\n//               <Form.Group\n//                 as={Col}\n//                 xs={10}\n//                 className='CreateEditHouseholdCol2Padding'\n//               >\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='StatusDateOfBirthRow'\n//                   className='CreateEditHouseholdStatusRowPadding '\n//                 >\n//                   <Form.Label xs={2} className='CreateEditHouseholdStatus'>\n//                     Status:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='status'\n//                       className='CreateEditHouseholdStatusTextBox'\n//                       value={status}\n//                       onChange={(e) => setStatus(e.target.value)}\n//                     />\n//                   </Col>\n//                   <Form.Label xs={2} className='CreateEditHouseholdDateOfBirth'>\n//                     Date of Birth:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='birthofdate'\n//                       className='CreateEditHouseholdDateOfBirthTextBox'\n//                       value={birthDate}\n//                       onChange={(e) => {\n//                         setBirthofdate(e.target.value)\n//                         setbirthdateError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {birthdateError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                 </Form.Group>\n\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='TypePhoneNumberRow'\n//                   className='CreateEditHouseholdTypeRowPadding '\n//                 >\n//                   <Form.Label xs={2} className='CreateEditHouseholdType'>\n//                     Type:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='Type'\n//                       readOnly\n//                       className='CreateEditHouseholdTypeTextBox'\n//                       value={type}\n//                       onChange={(e) => setType(e.target.value)}\n//                     />\n//                   </Col>\n\n//                   <Form.Label xs={2} className='CreateEditHouseholdPhoneNumber'>\n//                     Phone Number:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='phonenumber'\n//                       className='CreateEditHouseholdPhoneNumberTextBox'\n//                       value={phoneNumber}\n//                       onChange={(e) => {\n//                         setPhonenumber(e.target.value)\n//                         setphonenumberError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {phonenumberError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                 </Form.Group>\n\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='FirstNameEmailRow'\n//                   className='CreateEditHouseholdFirstNameRowPadding '\n//                 >\n//                   <Form.Label xs={2} className='CreateEditHouseholdFirstName'>\n//                     First Name:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='firstname'\n//                       className='CreateEditHouseholdFirstNameTextBox'\n//                       value={firstName}\n//                       onChange={(e) => {\n//                         setFirstname(e.target.value)\n//                         setfirstnameError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {firstnameError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                   <Form.Label xs={2} className='CreateEditHouseholdEmail'>\n//                     E-mail:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='email'\n//                       name='email'\n//                       className='CreateEditHouseholdEmailTextBox'\n//                       value={email}\n//                       onChange={(e) => {\n//                         setEmail(e.target.value)\n//                         setemailError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {emailError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                 </Form.Group>\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='LastNameStateRow'\n//                   className='CreateEditHouseholdLastNameRowPadding '\n//                 >\n//                   <Form.Label xs={2} className='CreateEditHouseholdLastName'>\n//                     Last Name:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='lastname'\n//                       className='CreateEditHouseholdLastNameTextBox'\n//                       value={lastName}\n//                       onChange={(e) => {\n//                         setLastname(e.target.value)\n//                         setlastnameError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {lastnameError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                   <Form.Label xs={2} className='CreateEditHouseholdCountry'>\n//                     Country:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='country'\n//                       className='CreateEditHouseholdCountryTextBox'\n//                       value={country}\n//                       onChange={(e) => {\n//                         setCountry(e.target.value)\n//                         setcountryError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {countryError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                 </Form.Group>\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='Gender'\n//                   className='CreateEditHouseholdGenderRowPadding '\n//                 >\n//                   <Form.Label xs={2} className='CreateEditHouseholdGender'>\n//                     Gender:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='gender'\n//                       className='CreateEditHouseholdGenderTextBox'\n//                       value={gender}\n//                       onChange={(e) => {\n//                         setGender(e.target.value)\n//                         setgenderError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {genderError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                   <Form.Label className='CreateEditHouseholdState'>\n//                     State:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='state'\n//                       className='CreateEditHouseholdStateTextBox'\n//                       value={addressState}\n//                       onChange={(e) => {\n//                         setState(e.target.value)\n//                         setstateError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {addressStateError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                 </Form.Group>\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='AttachementsRow'\n//                   className='CreateEditHouseholdAttachementsRowPadding '\n//                 >\n//                   <Form.Label\n//                     xs={2}\n//                     className='CreateEditHouseholdAttachements'\n//                   >\n//                     Attachements:\n//                   </Form.Label>\n//                   <Form.Control\n//                     as='textarea'\n//                     name='Attachements'\n//                     className='CreateEditHouseholdAttachementsTextBox'\n//                     value={attachements}\n//                     onChange={(e) => setAttachements(e.target.value)}\n//                   />\n//                   <Col className='CreateEditHouseholNopadding'>\n//                     <Row className='CreateEditHouseholdDownloadUploadFilePadding'>\n//                       <Form.Label className='CreateEditHouseholdUploadFile'>\n//                         Upload File\n//                       </Form.Label>\n//                     </Row>\n//                     <Row className='CreateEditHouseholdDownloadUploadFilePadding'>\n//                       <Form.Label className='CreateEditHouseholdDownloadFile'>\n//                         Download File\n//                       </Form.Label>\n//                     </Row>\n//                   </Col>\n\n//                   <Col className=' CreateEditHouseholNopadding'>\n//                     <Row className='CreateEditHouseholdNomargin'>\n//                       <Button\n//                         variant='CreateEditHouseholdvariantChooseFile\n//                        CreateEditHouseholNopadding CreateEditHouseholnopadding \n//                        CreateEditHouseholdChooseFile1Padding'\n//                         size='CreateEditHouseholdsizeChooseFile'\n//                       >\n//                         Choose File\n//                       </Button>\n//                     </Row>\n//                     <Row className='CreateEditHouseholdNomargin'>\n//                       <Button\n//                         variant='CreateEditHouseholdvariantChooseFile \n//                       CreateEditHouseholNopadding CreateEditHouseholnopadding\n//                        CreateEditHouseholdChooseFile2Padding'\n//                         size='CreateEditHouseholdsizeChooseFile'\n//                       >\n//                         Choose File\n//                       </Button>\n//                     </Row>\n//                   </Col>\n//                 </Form.Group>\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='Address'\n//                   className='CreateEditHouseholdAddressRowPadding '\n//                 >\n//                   <Form.Label xs={2} className='CreateEditHouseholdAddress'>\n//                     Address:\n//                   </Form.Label>\n//                   <Col className='CreateEditHouseholNopadding ' xs={10}>\n//                     <Form.Control\n//                       type='text'\n//                       name='Address'\n//                       className='CreateEditHouseholdAdressTextBox'\n//                       value={address}\n//                       onChange={(e) => {\n//                         setAddress(e.target.value)\n//                         setaddressError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {addressError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                 </Form.Group>\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='LeadChannel'\n//                   className='CreateEditHouseholdLeadChannelRowPadding '\n//                 >\n//                   <Form.Label xs={2} className='CreateEditHouseholdLeadChannel'>\n//                     Lead Channel:\n//                   </Form.Label>\n//                   <Col className='CreateEditHouseholNopadding ' xs={10}>\n//                     <Form.Control\n//                       type='text'\n//                       name='LeadChannel'\n//                       className='CreateEditHouseholdLeadChannelTextBox'\n//                       value={leadChannel}\n//                       onChange={(e) => {\n//                         setLeadchannel(e.target.value)\n//                         setleadchannelError()\n//                       }}\n//                     />\n//                     <Form.Control.Feedback type='invalid'>\n//                       {leadchannelError}\n//                     </Form.Control.Feedback>\n//                   </Col>\n//                 </Form.Group>\n//                 <Form.Group\n//                   as={Row}\n//                   controlId='ImplementedAmount'\n//                   className='CreateEditHouseholdImplementedAmountRowPadding '\n//                 >\n//                   <Form.Label\n//                     xs={2}\n//                     className='CreateEditHouseholdIMplementedAmount'\n//                   >\n//                     Implemented Amount:\n//                   </Form.Label>\n//                   <Col\n//                     className='CreateEditHouseholNopadding CreateEditHouseholdImplementedAmountMaxwidth'\n//                     xs={4}\n//                   >\n//                     <Form.Control\n//                       type='text'\n//                       name='implementedAmount'\n//                       className='CreateEditHouseholdIMplementedAmountTextBox'\n//                       value={ImplementedAmount}\n//                       onChange={(e) => setImplementedamount(e.target.value)}\n//                     />\n//                   </Col>\n//                   <img\n//                     alt=''\n//                     src={CreateEditHouseholdPlusIcon}\n//                     className='CreateEditHouseholdPlusIcon'\n//                   />\n//                   <Form.Label className='CreateEditHouseholdCreateanorderforthiscustomer '>\n//                     Create An Order For This Customer\n//                   </Form.Label>\n//                   <Button\n//                     variant='CreateEditHouseholdvariantProceed\n//                     CreateEditHouseholNopadding CreateEditHouseholnopadding '\n//                     size='CreateEditHouseholdsizeProceed'\n//                     onClick={hanndleclickproceed}\n//                   >\n//                     <img\n//                       alt=''\n//                       src={CreateEditHouseholdProceedIcon}\n//                       className='CreateEditHouseholdProceedIcon'\n//                     />\n\n//                     <label className='CreateEditHouseholdproceedLabel'>\n//                       Proceed\n//                     </label>\n//                   </Button>\n//                 </Form.Group>\n//               </Form.Group>\n//             </Row>\n//           </Form>\n//         </Card.Body>\n//       </Card>\n//     </div>\n//   )\n// }","/Users/leqaajamal/Desktop/milestone-2-Team-15/milestone-2-team-15/src/components/login.js",["24"],"import React from \"react\"\nimport { Form, Row, Col, Card, Button } from \"react-bootstrap\"\nimport Logo from \"../images/Guc.png\"\nimport \"../stylesheets/login.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nexport default function Login(props) {\n  return (\n    <div className=\"login\">\n      <Row className=\"LoginImageRow\">\n        <img src={Logo} alt=\"\" className=\"LoginImage\" />\n      </Row>\n\n      <Form.Group\n        as={Row}\n        controlId=\"formBasicEmail\"\n        // className=\"LoginEmailLabel\"\n      >\n        <Form.Label className=\"LoginEmailLabel\">Email address</Form.Label>\n        <Col xs={5} className=\"LogintextBoxCol\">\n          <Form.Control type=\"email\" placeholder=\"Enter email\" />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} controlId=\"formBasicPassword\">\n        <Form.Label className=\"LoginEmailLabel\">Password</Form.Label>\n        <Col xs={5} className=\"LogintextBoxCol\">\n          <Form.Control type=\"password\" placeholder=\"Password\" />\n        </Col>\n      </Form.Group>\n      <Col className=\"LoginButtonCol \">\n        <Button variant=\"dark\" type=\"submit\">\n          Login\n        </Button>\n      </Col>\n    </div>\n  )\n}\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":1,"column":8,"nodeType":"31","messageId":"32","endLine":1,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":2,"column":26,"nodeType":"31","messageId":"32","endLine":2,"endColumn":30},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","no-global-assign","no-unsafe-negation"]